AWSTemplateFormatVersion: '2010-09-09'
Description: 'Ethical Web Scraper Scheduled Job on AWS Fargate with ECR'

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID where the job will run
  
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Subnet IDs for the job (use private subnets)
  
  ImageTag:
    Type: String
    Default: 'latest'
    Description: Docker image tag to deploy
    
  ScheduleExpression:
    Type: String
    Default: 'rate(3 hours)'
    Description: EventBridge schedule expression (rate(3 hours), cron(0 */3 * * ? *), etc.)
    
  TargetUrls:
    Type: CommaDelimitedList
    Description: Comma-separated list of URLs to scrape
    
  S3BucketName:
    Type: String
    Default: ''
    Description: Optional S3 bucket name to store results (leave empty to only log to CloudWatch)

Conditions:
  HasS3Bucket: !Not [!Equals [!Ref S3BucketName, ""]]

Resources:
  # ECR Repository
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: ethical-web-scraper-job
      ImageScanningConfiguration:
        ScanOnPush: true
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep last 10 images",
                "selection": {
                  "tagStatus": "tagged",
                  "countType": "imageCountMoreThan",
                  "countNumber": 10
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }

  # S3 Bucket for results (optional)
  ResultsBucket:
    Type: AWS::S3::Bucket
    Condition: HasS3Bucket
    Properties:
      BucketName: !Ref S3BucketName
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldResults
            Status: Enabled
            ExpirationInDays: 90
            NoncurrentVersionExpirationInDays: 30
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: ethical-scraper-job-cluster
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE_SPOT
          Weight: 1

  # Task Definition
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: ethical-scraper-job-task
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 1024
      Memory: 2048
      ExecutionRoleArn: !Ref TaskExecutionRole
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
        - Name: scraper-job
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepository}:${ImageTag}"
          Essential: true
          Environment:
            - Name: NODE_ENV
              Value: production
            - Name: TARGET_URLS
              Value: !Join [",", !Ref TargetUrls]
            - Name: S3_BUCKET
              Value: !If [HasS3Bucket, !Ref S3BucketName, ""]
            - Name: LOG_LEVEL
              Value: info
            - Name: DELAY_MS
              Value: "3000"
            - Name: TIMEOUT_MS
              Value: "30000"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: scraper-job

  # Security Group
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ethical scraper job
      VpcId: !Ref VpcId
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  # IAM Roles
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: ECRAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource: '*'

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                Resource: !If
                  - HasS3Bucket
                  - !Sub "${ResultsBucket}/*"
                  - !Ref AWS::NoValue

  # CloudWatch Log Group
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/ethical-scraper-job
      RetentionInDays: 30

  # EventBridge Rule for scheduling
  ScheduleRule:
    Type: AWS::Events::Rule
    Properties:
      Name: ethical-scraper-schedule
      Description: Schedule for ethical web scraper job
      ScheduleExpression: !Ref ScheduleExpression
      State: ENABLED
      Targets:
        - Arn: !GetAtt ECSCluster.ClusterArn
          Id: "EthicalScraperTarget"
          RoleArn: !GetAtt EventBridgeRole.Arn
          EcsParameters:
            TaskDefinitionArn: !Ref TaskDefinition
            LaunchType: FARGATE
            NetworkConfiguration:
              AwsVpcConfiguration:
                SecurityGroups:
                  - !Ref SecurityGroup
                Subnets: !Ref SubnetIds
                AssignPublicIp: DISABLED
            PlatformVersion: LATEST

  # EventBridge IAM Role
  EventBridgeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ECSTaskExecution
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecs:RunTask
                Resource: !Ref TaskDefinition
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  - !Ref TaskExecutionRole
                  - !Ref TaskRole

Outputs:
  ECRRepositoryURI:
    Description: ECR Repository URI
    Value: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepository}"
    Export:
      Name: !Sub "${AWS::StackName}-ECRRepositoryURI"

  ClusterName:
    Description: ECS Cluster Name
    Value: !Ref ECSCluster
    Export:
      Name: !Sub "${AWS::StackName}-ClusterName"

  TaskDefinitionArn:
    Description: Task Definition ARN
    Value: !Ref TaskDefinition
    Export:
      Name: !Sub "${AWS::StackName}-TaskDefinitionArn"

  ScheduleRuleName:
    Description: EventBridge Schedule Rule Name
    Value: !Ref ScheduleRule
    Export:
      Name: !Sub "${AWS::StackName}-ScheduleRuleName"

  LogGroupName:
    Description: CloudWatch Log Group Name
    Value: !Ref LogGroup
    Export:
      Name: !Sub "${AWS::StackName}-LogGroupName"

  S3BucketName:
    Condition: HasS3Bucket
    Description: S3 Bucket Name for results
    Value: !Ref ResultsBucket
    Export:
      Name: !Sub "${AWS::StackName}-S3BucketName"